//TODO check for valid pipe names and method names

instantiated sequence test
	[TRUE, 5]var0[^] [FALSE, 0]var0[>]PRINTLN
	[TRUE, 5]var1[^] [FALSE, 0]var1[>]PRINTLN
	[TRUE, 5]var2[^] [FALSE, 0]var2[>]PRINTLN
	[TRUE, 5]var3[^] [FALSE, 0]var3[>]PRINTLN
	[TRUE, 5]var4[^] [FALSE, 0]var4[>]PRINTLN
	[TRUE, 5]var5[^] [FALSE, 0]var5[>]PRINTLN
	getDefault[>] ["Default: ", <]PRINTLN
	
	["Enter two booleans: "]PRINT
	[FALSE]INPUT[bool1]
	[FALSE]INPUT[bool2]
	[bool1, bool2]printBooleanOps
	
	["Enter two ints: "]PRINT
	[0]INPUT[int1] [0]INPUT[int2]
	[int1,int2]SWAP[int1,int2]
	[int1, "+", int2, "="]PRINT [int1, int2]+[>]PRINTLN
	[int1, "-", int2, "="]PRINT [int1, int2]-[>]PRINTLN
	[int1, "*", int2, "="]PRINT [int1, int2]*[>]PRINTLN
	[int1, "/", int2, "="]PRINT [int1, int2]/[>]PRINTLN
	[int1, "%", int2, "="]PRINT [int1, int2]%[>]PRINTLN
	[int1, "=", int2, "?  "]PRINT [int1, int2]=[>]PRINTLN
	[int1, "!=", int2, "? "]PRINT [int1, int2]!=[>]PRINTLN
	[int1, ">", int2, "?  "]PRINT [int1, int2]>[>]PRINTLN
	[int1, "<", int2, "?  "]PRINT [int1, int2]<[>]PRINTLN
	[int1, ">=", int2, "? "]PRINT [int1, int2]>=[>]PRINTLN
	[int1, "<=", int2, "? "]PRINT [int1, int2]<=[>]PRINTLN
	["Min,max of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[>, >] [<, ",", <]PRINTLN
	["Min of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[>, ^] [<]PRINTLN
	["Max of ", int1, " and ", int2, ": "]PRINT [int1,int2]MINMAX[^, >]PRINTLN

static sequence [write:Bool, value:I32]var0[glob:I32] // Should behave statically
	[write, value, glob]?:[glob]
	
inline sequence [write:Bool, value:I32]var1[glob:I32] // Should not
	[write, value, glob]?:[glob]
	
instantiated sequence [write:Bool, value:I32]var2[glob:I32] // Should not
	[write, value, glob]?:[glob]
	
static sequence [write:Bool, value:I32]var3[glob:I32] // Should
	[write, value]var0[glob]
	
static sequence [write:Bool, value:I32]var4[glob:I32] // Should
	[write, value]var1[glob]
	
static sequence [write:Bool, value:I32]var5[glob:I32] // Should not
	[write, value]var2[glob]
	
instantiated sequence getDefault[r:I32=123] // Should NOT return null; seems good now
	
static sequence [bool1:Bool, bool2:Bool]printBooleanOps
	[bool1, bool2]XOR[>]  ["Result of XOR:  ", <]PRINTLN
	[bool1, bool2]AND[>]  ["Result of AND:  ", <]PRINTLN
	[bool1, bool2]OR[>]   ["Result of OR:   ", <]PRINTLN
	[bool1, bool2]XNOR[>] ["Result of XNOR: ", <]PRINTLN
	[bool1, bool2]NAND[>] ["Result of NAND: ", <]PRINTLN
	[bool1, bool2]NOR[>]  ["Result of NOR:  ", <]PRINTLN

instantiated sequence [a:Anything, b:Anything]SWAP[newA:typeof a, newB:typeof b]
	[a]:[newB]
	[b]:[newA]